syntax = "proto3";

enum TagType {
  TAG_UNSPECIFIED = 0;
  BITTAG = 1;
  PRESTAG = 3;
  BITTAGNG = 7;
  BITPRESTAG = 8;
  COMPASSTAG = 9;
}

message TagInfo {
  TagType tag_type = 1; // tag type (should match config)
  // hardware
  string board_desc = 2; // board description
  string uuid = 3;       // processor unique id
  int64 intflashsz = 4;  // internal flash size (bytes)
  int64 extflashsz = 5;  // external flash size (bytes)
  // software
  string firmware = 6;    // firmware description
  string gitrepo = 7;     // git repo
  string githash = 8;      // git version hash
  string source_path = 9; // path to source in repo
  string build_time = 10;   // build time
  float qtmonitor_min_version = 11; // minimum version of qt monitor
  int32 flash_blocks = 12;  // number of flash blocks for
                            // block erase
  float accelconstant = 13; // constant for converting accel data
  float magconstant = 14;   // constant for converting mag data
}

enum TestResult {
  TEST_UNSPECIFIED = 0;
  TEST_RUNNING = 1;
  ALL_PASSED = 2;
  RTC_FAILED = 3;
  ADXL362_FAILED = 4;
  LPS_FAILED = 5;
  EXT_FLASH_FAILED = 6;
  OPT_FAILED = 7;
  AIS2_FAILED = 8;
  MMC5633_FAILED = 9;
  // command errors
  SET_RTC_FAILED = 10;
  AK09940A_FAILED = 11;
  LIS2DU12_FAILED = 12;
  TEST_DEBUG_FAILED = 16; // for debugging
}

// ADXL362 Configuration

enum BitTagLogFmt {
  BITTAG_UNSPECIFIED = 0;
  BITTAG_BITPERSEC = 1;
  BITTAG_BITSPERMIN = 2;
  BITTAG_BITSPERFOURMIN = 3;
  BITTAG_BITSPERFIVEMIN = 4;
}

message PresTagLogFmt {
  uint32 period = 1;
}

message Config {

  message Interval {
    int32 start_epoch = 1;
    int32 end_epoch = 2;
  }

  TagType tag_type = 1;
  // Schedule
  Interval active_interval = 2;
  repeated Interval hibernate = 3; // hibernation
  uint32 period = 7;               // period for synchronous tags
  bool triaxis_activity = 8;       // monitor activity in triaxis mode
  // Data
  BitTagLogFmt bittag_log = 4;     // bittag log format
  //AccelTagLogFmt acceltag_log = 5; // acceltag log format
  // Sensors
  Adxl362 adxl362 = 6;
  
}

// change internal_format/external_format to messages
// so they can be detected in qtmonitor

enum Adxl367Channel {
  AdxlChannel_UNSPECIFIED = 0;
  AdxlChannel_xyz  = 1;
  AdxlChannel_x    = 2;
  AdxlChannel_y    = 3;
  AdxlChannel_z    = 4;
  // should not implement other values
  AdxlChannel_xyzt = 5;
  AdxlChannel_xt   = 6;
  AdxlChannel_yt   = 7;
  AdxlChannel_zt   = 8;
  AdxlChannel_xyze = 9;
  AdxlChannel_xe   = 10;
  AdxlChannel_ye   = 11;
  AdxlChannel_ze   = 12;
}

message Adxl362 {
  enum Rng {
    Rng_UNSPECIFIED = 0;
    R2G = 1;
    R4G = 2;
    R8G = 3;
  }
  enum Odr {
    Odr_UNSPECIFIED = 0;
    S12_5 = 1;
    S25 = 2;
    S50 = 3;
    S100 = 4;
    S200 = 5;
    S400 = 6;
  }

  enum Aa {
    Aa_UNSPESIFIED = 0; // mispelled, but leave alone!
    AAhalf = 1;
    AAquarter = 2;
  }

  enum AdxlType {
    AdxlType_362 = 0;
    AdxlType_367 = 1;
  }

  // Need to add data format for acceltag
  //     Also, data source
  //

  enum Adxl367DataFormat {
      DF_UNSPECIFIED = 0;
      DF14           = 1;
      DF12           = 2;
      DF8            = 3;
  }

  Rng range = 1;
  Odr freq = 2;
  Aa filter = 3;
  float act_thresh_g = 4;            // act/inact thresh (g)
  float inact_thresh_g = 5;          // inactive thresh (g)
  float inactive_sec = 6;            // inactive time (seconds)
  AdxlType accel_type = 7;           // accelerometer 
  Adxl367DataFormat data_format = 8; // data format, ADXl367 only
  Adxl367Channel channels = 9;       // channels, ADXL367 only
  float active_sec = 10;             // need active seconds for triaxial mode
}

message BitTagLog { repeated BitTagData data = 1; }

message BitTagData {
  int32 epoch = 1;
  float voltage = 2;
  float temperature = 3;
  fixed64 rawdata = 4;
}

message BitTagNgLog {
  int32 epoch = 1;
  float voltage  = 2;
  float temperature = 3;
  repeated fixed32 activity = 4;
}

message PresTagLog {
  message PT {
    float temperature = 1;
    float pressure = 2;
  }
  int32 epoch = 1;
  float voltage  = 2;
  float temperature = 3;
  repeated PT data = 4;
}

message BitPresTagLog{
  message BPT {
    fixed32 activity = 1;
    float temperature = 2;
    float pressure = 3;
  }
  int32 epoch = 1;
  float voltage  = 2;
  float temperature = 3;
  repeated BPT data = 4;
}

message CompassTagLog{
  message Compass {
    bool raw_data = 1; // activity, mag[9], acc[6]
  }
  int32 epoch = 1;
  float voltage = 2;
  float temperature = 3;
  repeated Compass data = 4;
}

message PT_RAW {
    int32 epoch = 1;
    float voltage = 2;
    float temperature = 3;
    bytes samples = 4;
  }

message PresTagRawLog {
  float temp_constant = 1;
  float pres_constant = 2;
  repeated PT_RAW data = 3;
}


message SensorData {
    message AccelData {
      float ax = 1;
      float ay = 2;
      float az = 3;
    } 
    message MagData {
      float mx = 1;
      float my = 2;
      float mz = 3;
    }
    AccelData accel = 1;
    MagData mag = 2;
}

message CalibrationLog { 
  repeated SensorData data = 1;
}

message CalibrationConstants {
  message MagConstants { // M' = A(M-V)
    float b   = 1;  // field magnetude (at calibration)
    float v0  = 2;  // offset vector
    float v1  = 3;
    float v2  = 4;
    float a00 = 5;  // inverted scale array
    float a01 = 6;
    float a02 = 7;
    float a10 = 8;
    float a11 = 9;
    float a12 = 10;
    float a20 = 11;
    float a21 = 12;
    float a22 = 13;
  }

  sfixed32 timestamp = 1;
  MagConstants magnetometer = 2;
 
}

